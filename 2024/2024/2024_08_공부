0828 공부 내용
git, github, vsc 연동 완료
sourcetree 사용법은 보기는 했으나 아직 쓸 때는 아닌 것 같아보임
githubdesktop도 트라이 해봄

변경사항
--------------------
0829 공부 내용
코테 준비_https://young-taek.tistory.com/146
알고리즘_https://velog.io/@ngngs/%ED%95%9C-%EC%9E%A5%EC%9C%BC%EB%A1%9C-%EB%B3%B4%EB%8A%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98
파트1: 7개, 2: 16개
백준 todo0157계정, python으로 문풀시작 
2753
10871
8958
4344
11654
1152

-- 문제풀이 정리 -- 
1. map 함수란?
python 오랜만에 해서 map함수
형태: map(함수, 반복가능한객체)
장점: 코드를 간결하게 만들고, 큰 데이터셋에 대해 효율적으로 작동함.
lazy evaluation을 활용해서 메모리 사용을 최적화 할 수 있다

2. lazy evaluation(지연 평가)란?
정의: 계산의 결과값이 필요할 때까지 계산을 미루는 기법
효율성과 성능 향상을 위해 사용되며, 대용량 데이터나 무한 시퀸스를 다룰 때 유용함

-> 마치 수학 문제 풀 때 
특정 변수 계산 바로 안하고, 답 내는 과정이 다 나오면
푸는 것과 같다..

장점: 
    1. 메모리 사용 최적화
    2. 불필요한 계산 회피
    3. 무한 데이터 구조 처리 가능
    4. 복잡한 연산의 효율적 처리

단점: 
    1. 디버깅이 어려울 수 있음
    2. 일부 상황에서 성능 오버헤드 발생 가능
    3. side effects가 있는 함수와 함께 시 주의 필요 

# 리스트 컴프리헨션 (즉시 평가)
squares = [x**2 for x in range(1000000)]

# 제너레이터 표현식 (지연 평가)
lazy_squares = (x**2 for x in range(1000000))
>>> list comprehension은 모든 결과를 즉시 계산하고, 메모리에 저장하지만
generation comprehensino은 필요할 때만 계산한다.

3. input().split() 사용 주의점
input().split()은 문자열 리스트를 반환한다
따라서, N, X = int(input().split()) 코드는 오류가 발생한다
>> map 함수를 쓰거나 개별 변환해야함

4. 연속된 값들을 분리하는 법_4344
>>> 하나의 list로 받고 그 다음 두 개의 list로 분리한다.

5. f-string
형태: print(f"{rat:.3f}%")

6. sum 함수
형태: sum(iterable, start=0)
iterable: 합계를 계산할 요소들의 집합 (예: 리스트, 튜플, 집합 등)
start: 선택적 매개변수로, 합계에 더할 초기값 (기본값은 0)

ex1)_시작값 지정
numbers = [1, 2, 3, 4, 5]
total = sum(numbers, 10)
print(total)  # 출력: 25 (10 + 1 + 2 + 3 + 4 + 5)

ex2)_일반 표현식 
total = sum(x for x in range(1, 101))
print(total)  # 출력: 5050 (1부터 100까지의 합)

ex3)_2차원 리스트 
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
total = sum(sum(row) for row in matrix)
print(total)  # 출력: 45

7. 아스키 코드 함수_11654
문자 -> 숫자 변환: ord()
숫자 -> 문자 변환: chr()

--------------------------------------
0830 공부 내용 
-- 백준 -- 
2869_달팽이 문제
1978_소수 판정 
10872_팩토리얼_재귀
1914_하노이탑_재귀

-- 프젝 진행 상황 -- 
- phonenumreagister -
>> 기존에 짜뒀던 python으로 진행하는 거로 해서
heroku, pythonanywhere에 업로드 하는 방식은 일단
heroku는 유료라 패쓰, 그리고 후자 방식은 해봤는데 계속 이상하게 안되는 상황
>>>> 그래서 내일 다시 netlify 활용하는 방식으로 코드 갈아서 ㄱㄱ

-- 문제풀이 정리 --
1. 달팽이 문제 알고리즘
A = 낮에 올라가는 거리
B = 밤에 내려가는 거리
V = 가야하는 총 거리 
days = (V-B) / (A-B)
소요일: days 반올림(math.ceil(days))

2. 소수 판정 알고리즘 
    1. 에라토스테네스의 체
        2부터 시작, 현재 숫자가 소수라면 그 숫자의 배수들을 모두 지운다
        제거된 숫자 배열에서 다음 숫자로 이동하여 이를 반복한다
        남은 숫자들은 모두 소수
        이때, 검사는 제곱끈까지만 검사한다
        * 제곱근까지만 검사하는 이유?
        어떤 수 n이 소수가 아니라면, n = a X b로 표현이 가능
        a,b 모두 n제곱근 보다 큰 경우는 불가능하므로
        a,b 중 최소 하나는 n 제곱근 이하임
        따라서,약수의 대칭성에 의하여 n 제곱근까지만 검사해도 소수 여부를 판별할 수 있다
>>>>>>    2. 밀러-라빈 소수 판정법
        내용 추가하기,,, 일단 패스
    3. 6k+-1 최적화 
        6k,6k+2,6k+3,6k+4 는 소수가 아님
        6k+1, 6k+5만 소수가 가능한 형태
3. 하노이탑_알고리즘 다시 봐야할듯
    재귀함수 활용,, 
    def hanoi(n, start, end, auxiliary):
    # 기저 조건: 원반이 1개일 때
    if n == 1:
        print(start, end)  # start에서 end로 이동
        return
    
    # 재귀 호출: n-1개의 원반을 start에서 auxiliary로 이동
    hanoi(n-1, start, auxiliary, end)
    # 가장 큰 원반을 start에서 end로 이동
    print(start, end)
    # n-1개의 원반을 auxiliary에서 end로 이동
    hanoi(n-1, auxiliary, end, start)
    >>> 이동 과정 출력하는 알고리즘
    이동 횟수 = 2**N -1(N = 원판 개수)
4. N-Queen_재귀함수
백트래킹 알고리즘이란?
모든 가능한 배치를 시도하면서, 
조건에 맞지 않는 배치는 더 이상 탐색하지 않고
되돌아가며 해결하는 방법

-- 기타 -- 
- openpyxl이란?
Python에서 
Excel 파일(.xlsx, .xlsm, .xltx, .xltm)을 읽고 쓰는 데 
사용되는 라이브러리

---------------
0831 공부 내용
코테 강의_https://blog.encrypted.gg/919

-- 바킹독 강의 -- 
>>> 단원별로 1~2일, 매일 1시간씩이라도 확보해서 하자, 12월 31일까지 완강
Ot 
수강 계획 짬 
0x01강
컴퓨터는 1초에 3~5억개의 연산 가능
시간복잡도:입력의 크기와 문제를 해결하는데 걸리는 시간의 상관관계
빅오 표기법: 주어진 식을 값이 가장 큰 대표항만 남겨서 나타내는 방식
공간복잡도: 입력의 크기와 문제를 해결하는데 필요한 공간의 상관관계
512MB = 1.2억개의 int 선언이 가능
char 자료형 1byte = 8bit
unsigned char VS char
범위: 0~255         -128~127
int >> 4byte, 2^31-1 ~= 2.1*10^9(21억)

Inter Overflow: 
127+1 같은 거 할 때 
이진수 계산에서는 -128로 변하는 오류가 발생
>>> 해결책: 
각 자료형의 범위에 맞는 값을 가지게끔 연산시킨다

float 4 byte, double 8 byte 
> sign, exponent, fraction부가 존재 

실수의 주요 성질 
1. 실수의 저장/연산 과정에서는 반드시 오차가 존재
float: 유효숫자 6자리
double: 유효숫자 15자리

2. 그래서, double에 long long 버위의 정수를 함부로 담으면 안된다
long long은 유효숫자가 19자리임

3. 실수를 비교할 때는 등호를 사용하면 안된다


>>> 듣다보니 C,C++ 다시 공부해야할듯
https://modoocode.com/231
-- C 강의 --
2-2까지 완료.
C 이후에 C++ 들어가는 방식으로 진행,, 
