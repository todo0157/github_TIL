-- 학습 계획 --
주말 >> 배운 내용 정리, 밀린 내용 학습 
시험 기간에는 배운 내용 복습 정도만 가능할듯,, 

알고_주 2~3문제
바킹독_주 1~2강(연습문제도 있음)
C,C++_주 2~3 chapter씩 하기

알고리즘_https://velog.io/@ngngs/%ED%95%9C-%EC%9E%A5%EC%9C%BC%EB%A1%9C-%EB%B3%B4%EB%8A%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98
파트1: 3개, 2: 16개, 3: 16개, 4: 12개
총 47문제
>> 4개월 

바킹독_https://blog.encrypted.gg/919
29강
>> 4개월
문제 링크_https://github.com/encrypted-def/basic-algo-lecture/blob/master/workbook.md
연습 문제_0x03강_처음부터

모코_C,C++_https://modoocode.com/231
C: 21강, C++: 22강
총 45챕터
>> 4개월 
-------------
추가 사이트 
1. 생활 코딩(C/C++은없음)
https://opentutorials.org/course/1

2. SOEN
http://www.soen.kr/
C: 20강, C++: 18강 
3. 파일의 IT 블로그
https://pgh268400.tistory.com/5?category=1072473%20
C 20강

--------------
0909
-- 바킹독 -- 
-0x04강_연결 리스트 
0x00. 정의와 성질
연결 리스트: 원소들을 저장할 때 
그 다음 원소가 있는 위치를 포함시키는 방식으로 저장하는 자료구조

성질 : 
1. k번째 원소를 확인/변경을 위해 O(k)필요
2. 임의의 위치에 원소를 추가/제거는 O(1)
3. 원소들이 메모리상에 연속되어 있지 않아 Cache hit rate가 낮고,
할당은 다소 쉬움
종류: 단일, 이중, 원형 연결 리스트 
추가적으로 필요한 공간(overhead)가 필요함
32비트 컴퓨터의 경우 4N바이트, 
64비트 컴퓨터의 경우 8N바이트가 추가로 필요함

-0x01. 기능과 구현 
임의의 위치에 있는 원소를 확인/변경 = O(N)
임의의 위치에 원소를 추가/제거 = O(1)

연결 리스트의 정석적인 구현은 NODE 구조체나 클래스를 만들어서 
원소가 생성될 때 동적할당하는 방식이나, 코테에는 적절하지 않아서
야매 방식으로 구현하는 거를 봐둬도 나쁘지 않음

- "연결 리스트의 정석적인 구현_NODE 구조체"
struct NODE{
  struct NODE *prev, *next;
  int data;
}

- "야매 연결 리스트"
const int MX = 1000005;
int dat[MX], pre[MX], nxt[MX];
int unused = 1;

fill(pre, pre+MX, -1);
fill(nxt, nxt+MX, -1);

- "traverse, insert, erase 함수 구현해보기" 

-0x02. STL list
push_back, pop_back, push_front, pop_front
>>> 모두 O(1)
"list<int> L = {1,2};
auto t = L.begin();
"
>>> t는 1을 가리키는 중,,,

- 0x03. 연습문제
BOJ 1406: 에디터
손코딩 문제 1~3번
2,3번 다시 체크
2번_중간에 만나는 두 연결 리스트의 시작점들이 주어졌을 때 
만나는 지점을 구하는 방법
3번_주어진 연결 리스트 안에 사이클이 있는지 판단하는 법
>> "Floyd's cycle-finding algorithm" 참고 

-- 모코 -- 
- 5. 문자 입력 받기
"Buffer Overflow"
: 메모리 버퍼의 범위를 초과하여 데이터가 
인접한 메모리를 덮어쓰는 경우를 
나타내는 특정 유형의 오버플로우
>> 보안상 매우 취약하다

"Overflow"
: 정수, 부동소수점 등 저장된 값이
한계를 초과하는 모든 종류의 경우 의미
>>> 잘못된 계산이나 랩 어라운드 동작은 초래할 수 있으나
무조건 보안 위험을 초래하는 것은 아님

"Wrap around"
숫자가 최대값을 초과한 다음
해당 범위의 반대쪽 끝으로 랩 어라운드 하는 상황을
설명하는데 사용되는 용어
ex) 시계가 11시 + 2시간 >> 13시간이 아니라 1시
Integer Overflow, Integer Underflow가 속함

- 마지막 부분 문제 
(9 * celsius / 5) + 32 
--> double 형 연산 수행
이유: int * double >> double 이 나오고
이후 연산도 double 형으로 덮어짐
(9 / 5) * celsius + 32 
--> int 형 연산 수행
이유: 1 * double로, 
이전보다 부정확한 계산이 됨

- 6강. if문
"&"과 "&&"의 차이점
>> &: 비트 사이의 AND 연산
&&: 조건식 사이의 관계 표현, 즉 참, 거짓만 알려줌
&& >> Short Circuit Evaluation(SCE)

||, ! 연산자 
||도 똑같이 SCE적용됨

Review
"공간복잡도"
얼마나 많은 메모리(공간)가 필요한지 측정하는 방법
O(1): 입력 크기에 상관없이
고정된 양의 공간만 필요할 때
O(n): 입력 크기가 커질수록 더 많은 공간이
필요할 때
O(n^2): 필요한 공간이 매우 빠르게 증가할 때,, 

"Floyd's cycle-finding algorithm"
>> 거북이와 토끼 알고리즘이라고도 함
반복되는 항목에 루프(주기)가 있는지 확인하는데
활용
거북이: 한번에 한 걸음씩
토끼: 한번에 두 걸음씩
움직일때, 루프가 있으면 
토끼는 루프 내에서 거북이를 따라잡는다

-- 알고리즘 -- 
- 1181_단어 정렬
unique, compare 함수 이해 필요
그리고, 아래 구문 이해해야함
"
bool compare(const string &a, const string &b){
    if (a.length() != b.length()){
        return a.length() < b.length();
    }
    return a<b;
}
"

"unique" 함수 
vector<int> numbers = {1, 2, 2, 3, 4, 4, 4, 5, 6, 6};  // Sorted vector with consecutive duplicates

auto newEnd = unique(numbers.begin(), numbers.end());
>> newEnd로 중복되지 않는 원소로 이루어진 vector 형성
numbers.erase(newEnd, numbers.end());
>>> numbers = {1,2,3,4,5,6}임

"sort 함수의 활용"
sort(numbers.begin(), numbers.end(), compare), compare는 정의된 함수
sort(numbers.begin(), numbers.end(), [](int a, int b))
>>> sort 함수에서 분류 기준을 둘 수 있음
"핵심" >> compare와 같이 오는 분류 기준의 return 값은 
반드시, boolean값으로 true or false의 값을 가져야함
만약 true 라면 순서 배치를 기존 방식대로 유지하고
false 라면 순서 배치를 반대로 바꿈

- 추가 정리 
정석적인 연결 리스트 구현
"
struct NODE{
  struct NODE *prev, *next;
  int data;
}
"

"포인터": 다른 변수의 메모리 주소를 저장하는 변수 
int *p3, *p4; 
int* p1,p2;
>> p1,3,4는 int 타입의 포인터이나
p2는 그냥 int 타입의 변수임
즉, int* 으로 포인터를 표현하면 맨 앞의 변수만 포인터로 지정이 됨

"구조체"
여러 변수들을 선언하는 기준을 분류해뒀다고 보면 쉬움

"nullptr", null pointer
nullptr이 할당되면 포인터가 메모리 위치나 개체를 가리키지 않는다는 의미

"*"
1. 포인터 선언
>> 앞에서 정리함
2. 포인터 역참조
>>> 이 경우 포인터 변수 앞에 "*"을 표시하면 됨
포인터가 가리키는 메모리 위치에 저장된 값을 액세스해줌 

"class"
"private" >> class 밖에서 바로 접근 불가
"public" >> 가능 
---------
0910
-- 바킹독 -- 
-0x05강. 스택
0x00. 정의와 성질
정의: 한쪽 끝에서만 원소를 넣거나 뺄 수 있는 자료구조
FILO(First In Last Out)자료구조
성질
1. 원소의 추가/제거, 최상단 원소 확인 > O(1)
2. 최상단이 아닌 나머지 원소의 확인/변경은 원칙적으로 불가능 
(배열을 활용해 스택을 구현해서 우회적으로 확인이 가능하게 할 수는 있다)

0x01. 기능과 구현
배열을 통한 구현이 제일 간단함

"
const int MX = 10000005;
int dat[MX];
int pos = 0;
"
"pos" >>> 스택의 길이, 즉 스택 내의 원소의 수를 의미하며
다음에 "원소가 추가될 때, 삽입해야하는 곳"을 가리키고 있음 

0x02. STL stack
push, pop, top, empty, size

>>> 가능하면 "STL stack"을 쓰는 게 좋음
"주의사항"
스택이 비어있는데 top, pop을 호출하면 에러가 발생하므로
스택이 비어있을 때 처리하는 경우를 따로 생각해야함


-- 모코 -- 
-7강. for, while

for 문에서 조건 만족하면 진행하고 그 이후에 증감식 적용
무한 for 문 >> " for(;;)"

"break"와 "continue"의 차이점
continue는 해당 조건만 이후 아래 명령들을 생략하고 넘어가는 거
break는 모든 조건들을 생략하고 넘어감 

while, do while
>> "do while"은 일단 1회 진행하고 그 이후에 while문 들어감

-- 알고리즘 -- 
2309. 일곱 난쟁이_완전탐색
>>> erase함수 복습 체크함
추가로 vector 원소 삭제할 때 
"higher index -> lower index" 순으로 삭제해야 함
"sort함수" 사용법 복습 함. 

"이중 for문"에서 inner for문의 break는 하나의 for문만 빠져나올 수 있음
이중 for문을 한번에 탈출하는 방법
>> 
1. flag Variable, flag 방식
이중 for 문 내부에 boolean 값 변수를 설정해두고, 
inner for 문 바로 아래에 해당 boolean 변수가 true 일 때 
break를 또 거는 방식임
2. goto statement
개인적으로 goto 방식이 제일 간편한듯 
>>>
"#include <iostream>
using namespace std;

int main() {
    for (int i = 0; i < 5; i++) {  // Outer loop
        for (int j = 0; j < 5; j++) {  // Inner loop
            if (i == 2 && j == 2) {  // Condition to break out of both loops
                goto end;  // Use goto to jump out of both loops
            }
            cout << "i: " << i << ", j: " << j << endl;
        }
    }

end:  // Label to jump to
    return 0;
}
"

-------------------
0911
-- 모코 -- 
Ch8 >>> 생략
Ch9. Switch문
" 
switch (input) {
case 1:
    printf("아이 맛있어 \n");
    break;

case 2:
    printf("아이 시원해 \n");
    break;

case 3:
    printf("zzz \n");
    break;

default:
    printf("무슨 명령인지 못 알아 듣겠어. 왈왈 \n");
    break;
}
"
case 값은 정수만 올 수 있고, "변수"가 들어가면 안됨
"default"는 if else에서의 else에 해당함
"break"가 들어가야 switch 문을 빠져나올 수 있음

if VS switch
if는 순차적으로 계산을 반복(CMP연산이 늘어날 수 있음))하지만
switch는 내부적으로 "jump table"이라는 것을 생성함
이를 통해 모든 값의 비교를 하지 않고,
값이 존재하는 곳으로 점프함
(CMP 연산이 늘어나지 않고, jump table의 크기만 커져 성능에 영향을 받지 않음)

-- 알고리즘 --
-10819_차이를 최대로
"do-while"구문
do의 코드블록은 한번은 무조건 실행함
그 이후 while의 조건이 True이면 do 코드 블록을 다시실행
false이면 반복문 종료하고 다음 코드로 넘어감

"next_permutation(arr.begin(), arr.end())"
>>> 현재 배열 arr의 다음 순열을 생성하며
다음 순열이 존재하면 "true"를
존재하지 않고, 마지막 순열에 도달하면 "false"를 반환함
