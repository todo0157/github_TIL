-- 학습 계획 --
주말 >> 배운 내용 정리, 밀린 내용 학습 
시험 기간에는 배운 내용 복습 정도만 가능할듯,, 

알고_주 2~3문제
바킹독_주 1~2강(연습문제도 있음)
C,C++_주 2~3 chapter씩 하기

알고리즘_https://velog.io/@ngngs/%ED%95%9C-%EC%9E%A5%EC%9C%BC%EB%A1%9C-%EB%B3%B4%EB%8A%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98
파트2: 16개, 3: 16개, 4: 12개
총 44문제
>> 4개월 

바킹독_https://blog.encrypted.gg/919
27강
>> 4개월
문제 링크_https://github.com/encrypted-def/basic-algo-lecture/blob/master/workbook.md
연습 문제

모코_C,C++_https://modoocode.com/231
C: 17강, C++: 22강
총 39챕터
>> 4개월 
-------------
추가 사이트 
1. 생활 코딩(C/C++은없음)
https://opentutorials.org/course/1

2. SOEN
http://www.soen.kr/
C: 20강, C++: 18강 
3. 파일의 IT 블로그
https://pgh268400.tistory.com/5?category=1072473%20
C 20강

--------------
0916
-- 모코_10강.C 언어에서의 형 변환(캐스팅)
"
plus = (int) a + b
"
>> a를 int형 변수로 본다는 선언
이렇게 하면 a가 double이나 float형이 었더라도
오류가 발생하지 않음

부동 소수점_floating point, 고정 소수점
부동 소수점 방식으로 표현할 수 있는 수의 범위가 더 넓음
IEEE 754 표준화 방식 
-- 알고리즘 -- 
-2805_이분탐색_나무 자르기
이분(이진)탐색:
배열에서 특정 값을 찾기 위한 효율적인 알고리즘 
배열을 반씩 나눠가며 원하는 값을 빠르게 찾음
시간 복잡도가 o(log n)으로 
매우 큰 데이터에서도 빠르게 동작함 

기본 과정 
"
1. 탐색 범위 설정
2. 중간 위치 값 확인
3. 찾고자 하는 값이 중간 값보다 작은 경우, 탐색 범위를 
중간 값의 왼쪽 절반으로 줄임
4. 찾고자 하는 값이 중간 값보다 큰 경우, 탐색 범위를
중간 값의 오른쪽 절반으로 줄임
"
>>> 탐색 범위를 계속 절반으로 줄여가며
값을 찾고, 탐색 범위가 없을 때까지 반복함 

-- 바킹독 --
-0x06강 - 큐
-정의와 성질
FIFO, 한쪽 끝에서 원소를 넣고 반대쪽 끝에서 원소를 빼는 자료구조
성질
1. 원소의 추가/제거, 맨 앞/뒤 원소 확인이 O(1)
2. 제일 앞/뒤가 아닌 나머지 원소 확인/변경은 원칙적으로 불가능 
- 구현
보통 배열로 구현하는데 
head, tail을 둬서 처리함
추가할 때는 tail +1
삭제할 때는 head +1하는 방식
문제는 앞에 삭제되지 않고 누적되는 원소들이 생긴다는 점
이를 방지하기 위해서는 "원형 큐" 방식으로 구현하면 됨
-STL queue
push, empty, pop,size 기능은 stack과 동일 
front, back 함수 이용하면 맨 앞/뒤 원소가 출력되어서 나옴

---------
0917
-- 모코_11강. 배열 
11-1. 배열, 상수
배열의 크기를 변수를 통해 정의할 수 없다
"동적 할당"이라는 방법으로 우회적으로 정의가 가능하기는 하다.

"int arr[3] = {1};"
>>> 사실상 "int arr[3] = {1, 0, 0};"

11-2. 고차원 배열
"arr[x][y] "
>>> x번째 행, y번째 열
기존 1차원이 가로로 늘어났는데
[x]를 추가했으므로 x행이 생긴 거

"arr[x][y][z]"
>>> 기존 y번째 행, z번째 열이
x층 생긴 거 

-- 알고리즘 -- 
-2110_이분탐색_공유기 설치 
"거리"를 기준으로 이분탐색 알고리즘 설정하기.
C++에서의 sort함수 사용 >> "함수이름.sort()"_"안됨"
대신 "sort(함수이름, 함수이름+범위)"

C++에서는 for 문에서 자주 쓰는 range함수가 없음 

-- 바킹독 -- 
-0x07강. 덱
정의: 양쪽 끝에서 삽입/삭제 가능 
Double Ended Queue, Deque임

성질: 
원소의 추가/제거, 맨 앞/뒤 원소 확인 모두 O(1)
나머지 원소들의 확인/변경은 원칙적으로 불가능 
다른 STL과는 다르게 "STL deque에서는 인덱스로 원소에 접근이 가능"함 

구현
큐와는 다르게 head와 tail을 0에 두는 게 아니라
head와 tail을 중간지점에 두고 시작함
왜냐? deque은 앞뒤로 늘어나는 게 가능하기 때문에 
중간 지점부터 시작하는 게 유리하기 때문 

STL deque에는 STL vector에 있는 함수가 모두 있음 
다만, STL deque는 vector에 비해 비효율적이라
앞/뒤쪽에 추가/제거가 필요하지 않으면 vector를 쓰는 게 좋다 
------
0921
-- 바킹독 연습 문풀 -- 
-18258_long long 활용
-2164_"이중으로 Queue"구조를 활용했을 때 시간 초과가 뜸
-5430_AC
Duque활용할 때 뒤집거나 앞에서 빼는 거를 
매번 덱 자체를 뒤집는게 아니라 뒤집고 빼면 뒤에서 빼고
이후 다시 뒤집히면 앞에서 다시 빼는 방식이 있음 
>>> 더 간단하게 처리하는 방식 
추가적으로 배운 함수
"stoi 함수는 "문자열을 정수로 변환"해줌"
"clear함수는 모든 요소를 제거해서 컨테이너를 비워줌"
"rbegin, rend함수는 reversebegin이니 end함수와 같음"
-11003_"슬라이딩 윈도우"
윈도우 = "부분 구간"
부분구간을 한 칸씩 이동하며 새로운 연산을 반복하는 방법
>>> 이전 계산값을 활용하여 중복 계산을 최대한 방지할 수 있어서
시간 복잡도 측면에서 유리한 기법임 
