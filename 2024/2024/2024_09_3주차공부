-- 학습 계획 --
주말 >> 배운 내용 정리, 밀린 내용 학습 
시험 기간에는 배운 내용 복습 정도만 가능할듯,, 

알고_주 2~3문제
바킹독_주 1~2강(연습문제도 있음)
C,C++_주 2~3 chapter씩 하기

알고리즘_https://velog.io/@ngngs/%ED%95%9C-%EC%9E%A5%EC%9C%BC%EB%A1%9C-%EB%B3%B4%EB%8A%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98
파트2: 16개, 3: 16개, 4: 12개
총 44문제
>> 4개월 

바킹독_https://blog.encrypted.gg/919
27강
>> 4개월
문제 링크_https://github.com/encrypted-def/basic-algo-lecture/blob/master/workbook.md
연습 문제

모코_C,C++_https://modoocode.com/231
C: 17강, C++: 22강
총 39챕터
>> 4개월 
-------------
추가 사이트 
1. 생활 코딩(C/C++은없음)
https://opentutorials.org/course/1

2. SOEN
http://www.soen.kr/
C: 20강, C++: 18강 
3. 파일의 IT 블로그
https://pgh268400.tistory.com/5?category=1072473%20
C 20강

--------------
0916
-- 모코_10강.C 언어에서의 형 변환(캐스팅)
"
plus = (int) a + b
"
>> a를 int형 변수로 본다는 선언
이렇게 하면 a가 double이나 float형이 었더라도
오류가 발생하지 않음

부동 소수점_floating point, 고정 소수점
부동 소수점 방식으로 표현할 수 있는 수의 범위가 더 넓음
IEEE 754 표준화 방식 
-- 알고리즘 -- 
-2805_이분탐색_나무 자르기
이분(이진)탐색:
배열에서 특정 값을 찾기 위한 효율적인 알고리즘 
배열을 반씩 나눠가며 원하는 값을 빠르게 찾음
시간 복잡도가 o(log n)으로 
매우 큰 데이터에서도 빠르게 동작함 

기본 과정 
"
1. 탐색 범위 설정
2. 중간 위치 값 확인
3. 찾고자 하는 값이 중간 값보다 작은 경우, 탐색 범위를 
중간 값의 왼쪽 절반으로 줄임
4. 찾고자 하는 값이 중간 값보다 큰 경우, 탐색 범위를
중간 값의 오른쪽 절반으로 줄임
"
>>> 탐색 범위를 계속 절반으로 줄여가며
값을 찾고, 탐색 범위가 없을 때까지 반복함 

-- 바킹독 --
-0x06강 - 큐
-정의와 성질
FIFO, 한쪽 끝에서 원소를 넣고 반대쪽 끝에서 원소를 빼는 자료구조
성질
1. 원소의 추가/제거, 맨 앞/뒤 원소 확인이 O(1)
2. 제일 앞/뒤가 아닌 나머지 원소 확인/변경은 원칙적으로 불가능 
- 구현
보통 배열로 구현하는데 
head, tail을 둬서 처리함
추가할 때는 tail +1
삭제할 때는 head +1하는 방식
문제는 앞에 삭제되지 않고 누적되는 원소들이 생긴다는 점
이를 방지하기 위해서는 "원형 큐" 방식으로 구현하면 됨
-STL queue
push, empty, pop,size 기능은 stack과 동일 
front, back 함수 이용하면 맨 앞/뒤 원소가 출력되어서 나옴

---------
0917
-- 모코_11강. 배열 
11-1. 배열, 상수
배열의 크기를 변수를 통해 정의할 수 없다
"동적 할당"이라는 방법으로 우회적으로 정의가 가능하기는 하다.

"int arr[3] = {1};"
>>> 사실상 "int arr[3] = {1, 0, 0};"

11-2. 고차원 배열
"arr[x][y] "
>>> x번째 행, y번째 열
기존 1차원이 가로로 늘어났는데
[x]를 추가했으므로 x행이 생긴 거

"arr[x][y][z]"
>>> 기존 y번째 행, z번째 열이
x층 생긴 거 

-- 알고리즘 -- 
-2110_이분탐색_공유기 설치 
"거리"를 기준으로 이분탐색 알고리즘 설정하기.
C++에서의 sort함수 사용 >> "함수이름.sort()"_"안됨"
대신 "sort(함수이름, 함수이름+범위)"

C++에서는 for 문에서 자주 쓰는 range함수가 없음 

-- 바킹독 -- 
-0x07강. 덱
정의: 양쪽 끝에서 삽입/삭제 가능 
Double Ended Queue, Duque임

성질: 
원소의 추가/제거, 맨 앞/뒤 원소 확인 모두 O(1)
나머지 원소들의 확인/변경은 원칙적으로 불가능 
다른 STL과는 다르게 "STL deque에서는 인덱스로 원소에 접근이 가능"함 

구현
큐와는 다르게 head와 tail을 0에 두는 게 아니라
head와 tail을 중간지점에 두고 시작함
왜냐? deque은 앞뒤로 늘어나는 게 가능하기 때문에 
중간 지점부터 시작하는 게 유리하기 때문 

STL deque에는 STL vector에 있는 함수가 모두 있음 
다만, STL deque는 vector에 비해 비효율적이라
앞/뒤쪽에 추가/제거가 필요하지 않으면 vector를 쓰는 게 좋다 
-----------
0918
-- 알고리즘 --
-16564_이진탐색 
목표 레벨을 찾기 위해서 
오름차순으로 정렬한 이후에 
특정 레벨을 지정, 해당 레벨까지 필요한 경험치를
각각 계산, 합산하여 필요한 경험치를
주어진 경험치와 비교하는 방식으로 처리 

-- 모코 -- 
12-1. 포인터 
포인터는 "특정한 데이터의 주소값을 보관함"
포인터도 변수임 
데이터의 형에 "*"을 붙임으로 정의하며
"&"연산자로 특정 데이터의 메모리 상의 주소를
불러올 수 있다  
"*" 연산자로 데이터 메모리 상의 주소에 해당하는
"데이터"를 불러올 수 있음

요약 
"*" 는 어떤 자료형을 가진 포인터가 가리키는 실제 데이터입니다.
"&"는 데이터의 주소값을 나타냅니다

12-2. 초반 부분 다시 봐야할듯(상수 포인터)
상수 포인터, "const" 위치에 따라 의미가 달라짐 

포인터끼리의 덧셈은 불가능하나,
뺄셈은 가능함

포인터에 정수를 더하는 것도 가능 
이때, 더하는 정수가 1일 때
포인터를 int형으로 지정했으면 1*4만큼 더함
즉, 데이터의 형의 크기만큼 곱한 값을 계산함 

배열의 이름을 사용하면 암묵적으로 첫번째 원소를 가리키는
포인터로 타입 변환됨 
단, "sizeof", "&"의 경우 제외 
 
[] 연산자 >>> 포인터 위치를 가리켜주는 연산자로
arr[3] == 3[arr] == *(arr + 3) 이다.

복습할 때 const 다시 보기 

12-3. 고난도라 다시 보기
포인터의 포인터 

2차원 배열 포인터: 포인터임 

포인터 배열: 배열임 
*뒷부분이 진짜 의미라 보면 됨 
>>> 책으로도 읽고 정리해야할듯 