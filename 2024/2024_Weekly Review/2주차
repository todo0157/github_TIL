2주차 Reviwe_~0907
-- 주요 키워드 -- 

-- 바킹독 --
STL(Standard Template Library)
scanf, cin <-> getline
ios::sync_with_stdio(0)
cin.tie(0)
endl >> 사용 금지 
자료구조로써의 배열: 메모리 상에 원소를 연속하게 배치한 자료 구조
O(1)에 k번째 원소 확인/변경 가능
insert, erase 함수 사용법
배열 사용 팁 fill 함수 이용 
fill(a,a+21,0)
>> 1번째 위치부터 21번째 위치까지 0으로 초기화시킴
vector 에서는 "="을 사용하면 deep copy가 발생함
for 문의 다른 표현방식_range-based for loop
vector<int> v1 = {1,2,3,4,5,6};
for (int e:v1)

vector의 size 메소드는 unsigned int or long long을 반환함, 그래서 오버플로우가 발생하기도하므로 주의 

string s, s는 입력 받는 값
for (auto c: s)
freq[c-'a']++ 같이 진행하면
c - 'a' = 0~25 사이의 값이 나온다

함수 설정하는 방법 
"int is_M(int num){
    return 15 * (num / 60 + 1);  
}" 이런 식으로 작성, "자료형 함수명(자료형 변수){}"꼴

"reverse" 함수 활용
"reverse(num+a, num+b+1);" >> num배열을 a부터 b까지의 값들을 반전시킴 

"std::vector<int> vec = {1, 2, 3, 4, 5};

// Reverse the entire vector
std::reverse(vec.begin(), vec.end());" >>> 전체 reverse 

"swap" 함수 활용
swap(a, b) >> a,b의 Type이 같아함

C++에서는 "*"*i와 같은 기능 제공 x
대신, string(i, '')으로 써야함
i번만큼 "*"을 반복한다는 의미
주의사항은 '' 대신 ""으로 쓰면 XXXX

최댓값 처리 알고리즘_max_value = 0으로 선언해서 시작하는 방식
도 있고, 전역변수의 초기값은 0이다

"
  for(int i = 0; i < 9; i++) cin >> a[i];
  cout << *max_element(a, a+9) << '\n';
  cout << max_element(a, a+9) - a + 1;
}
" 이런 식으로 max_element함수를 이용하는 방법도 가능 
이때 "*max_element(a, a+9)" >> "value 값 출력"
"max_element(a, a+9) - a + 1" >> "index 값 출력"

for(auto:s)
  freq[c-'a']++;
>> c-'a'값은 아스키코드 값으로 자동으로 계산이 됨

"int lst[26];" 같이 변수 선언을 전역 변수로 할 때와
특정 구간에서 선언할 때 차이가 있음
전역 변수로 선언하면 자동으로 0으로 설정되나,
특정 구간에서 선언할 때는 쓰레기 값이 자동으로 들어가니
값을 초기에 세팅해줘야함 

"for(int i=0; i<N;i++)"대신 "while(N--)"

"int s[2][7]={}" >> 이차원 배열 형성

"(equal(begin(row1), end(row1), begin(row2)))"
row1과 row2의 배열이 같은지 확인함, 원소와 순서까지 비교해줌


"bool 함수 활용"
bool occur[2000001] = {false}
>> occur 배열을 생성하고 값들 false로 선언 

"두 변수 사이의 차이"구하는 "절댓값 함수"

-- 알고리즘 --
sort(start,end)
vector<int> >> 동적배열인 벡터는 크기를 동적으로 변경 가능
resize(num) >> 벡터의 크기를 num으로 변경함
"vector<int> numbers(N);"
"// Create a vector to store the numbers
sort(numbers.begin(), numbers.end());"
-- C --
RAM(Read Access Memory):휘발성, 매우 빠름
1nibble = 4bit
word >> 연산이 실행되는 최소 단위 
%o: 8진수
%d: 10진수
%x: 16진수
float a = 3.12f "f를 붙이지 않으면 double로 저장됨"
연산자
XOR(^): 서로 달라야 1
반전 연산자(~): 0,1 서로 변경 
쉬프트 연산자(>>): 오른쪽으로 쉬프트 해주며, 맨 왼쪽 앞 수로 추가된 부분이 채워짐
%u >> unsigned로 해석
scanf("% d", &num);
>> &가 있어야 함수, 변수 이름 앞에 &을 붙이면 그 변수의 메모리 주소가 나온다 
scanf로 double 값을 입력받을 때는 반드시 %lf를 써야한다
("기본인자진급 때문")

* 문자 상수 > ''로 묶고, %c
문자열 상수 > ""로 묶음, %s로 묶음

++ 추가 정리 ++ 
- "insert 함수 활용"
int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};
    
    // Insert a single element 10 at the beginning
    vec.insert(vec.begin(), 10);
    
    // Insert two elements 20 at position 2
    vec.insert(vec.begin() + 2, 2, 20);
    
    // Insert a range of elements from another vector
    std::vector<int> another_vec = {100, 200};
    vec.insert(vec.begin() + 1, another_vec.begin(), another_vec.end());

    // Display the vector
    for (int num : vec) {
        std::cout << num << " ";
    }
    return 0;
}
>> 결과 
10 100 200 1 20 20 2 3 4 5

- "erase 함수 활용"

int main() {
    std::vector<int> vec = {10, 100, 200, 1, 20, 20, 2, 3, 4, 5};
    
    // Erase the first element
    vec.erase(vec.begin());
    
    // Erase elements from position 2 to 4
    vec.erase(vec.begin() + 2, vec.begin() + 5);
    
    // Display the vector
    for (int num : vec) {
        std::cout << num << " ";
    }
    return 0;
}
>> 결과 
100 200 20 3 4 5

- "Cache Hit Ratio"_https://ikit.tistory.com/11
cache: 다음에 사이트를 재방문할 때 해당 콘텐츠가 빠르게 표시되도록
웹 사이트의 데이터와 콘텐츠를 임시로 저장하는 고속 메모리

Cache Hit: 메모리에서 데이터를 찾아 성공적으로 제공되는 것
Cache Miss: 메모리를 검색했으나 데이터를 찾을 수 없는 경ㅇ임
이경우 컨텐츠가 전송되어 캐시에 기록됨.
